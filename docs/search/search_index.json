{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Time Series API of Argentina The Time Series API of Argentina, allows to query indicators with chronological evolution published in open formats by organisms of the National Public Administration. A time series is a sequence taken at successive equally spaced points in time. indice_tiempo ipc_2016_nivel_general 2017-04 0.28 2017-05 0.24 2017-06 0.22 2017-07 0.22 2017-08 0.23 2017-09 0.24 2017-10 0.23 2017-11 0.22 2017-12 0.25 2018-01 0.25 2018-02 0.26 2018-03 0.26 A web service , is a technology that allows data exchange between applications. apis.datos.gob.ar/series/api/series/?ids=101.1_I2NG_2016_M_22:percent_change_a_year_ago format=csv These indicators are time series examples: Inflation ( csv | json ) Exchange rate ( csv | json ) Economic activity ( csv | json )","title":"Home"},{"location":"#time-series-api-of-argentina","text":"The Time Series API of Argentina, allows to query indicators with chronological evolution published in open formats by organisms of the National Public Administration. A time series is a sequence taken at successive equally spaced points in time. indice_tiempo ipc_2016_nivel_general 2017-04 0.28 2017-05 0.24 2017-06 0.22 2017-07 0.22 2017-08 0.23 2017-09 0.24 2017-10 0.23 2017-11 0.22 2017-12 0.25 2018-01 0.25 2018-02 0.26 2018-03 0.26 A web service , is a technology that allows data exchange between applications. apis.datos.gob.ar/series/api/series/?ids=101.1_I2NG_2016_M_22:percent_change_a_year_ago format=csv These indicators are time series examples: Inflation ( csv | json ) Exchange rate ( csv | json ) Economic activity ( csv | json )","title":"Time Series API of Argentina"},{"location":"additional_parameters/","text":"Filter and transform series Download a table with one or many series Filtering by dates Changing temporal aggregation Changing temporal aggregation function Apply transformations Apply transformations and changing the temporal aggregation function in individual series, at the same time Download a table with one or many series ids parameter allows querying up to 40 series simultaneously , separated by commas. PCI by categories http://apis.datos.gob.ar/series/api/series/?ids=103.1_I2N_2016_M_15,101.1_I2NG_2016_M_22,102.1_I2S_ABRI_M_18,102.1_I2B_ABRI_M_15,103.1_I2R_2016_M_18,103.1_I2E_2016_M_21 format=csv Filtering by dates start_date and end_date parameters allow limiting a query to a particular range in time. Exchange rate since January 2016 https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26 start_date=2016-01 limit=1000 format=csv Exchange rate up to December 2016 https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26 end_date=2016-12 format=csv Exchange rate from January 2016 up to December 2016 https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26 start_date=2016-01 end_date=2016-12 format=csv Changing temporal aggregation By default, all series are shown in the highest possible frequency (this is, the lowest frequency between all the series in the query). collapse parameter allows to choose a lower frequency than this one. General, Brasil and China Real Exchange Rate Indexes. Monthly values quarterly averaged. http://apis.datos.gob.ar/series/api/series/?limit=1000 collapse=quarter ids=116.3_TCRMA_0_M_36,116.3_TCRC_0_M_22,116.3_TCRB_0_M_23 format=csv Changing temporal aggregation function By default, when the API calculates temporal aggregations (ie. converting a monthly series into a quarterly one) it does an average of series values in each period . This function of aggregation can be changed for all the series in the query using collapse_aggregation parameter, or to any individual series without affecting the others (sum, max, min, etc.). Exchange rate. Daily values a the end of the month. https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26 collapse=month collapse_aggregation=end_of_period format=csv Exchange rate. Daily values minimum, maximum, average and end of the month. https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26:min,168.1_T_CAMBIOR_D_0_0_26:avg,168.1_T_CAMBIOR_D_0_0_26:max,168.1_T_CAMBIOR_D_0_0_26:end_of_period collapse=month format=csv limit=1000 Apply transformations Series can be transformed into different units (percentage variation, year-to-year variation, etc.) individually or for all the query, using representation_mode parameter. Exchange rate, Core PCI and General PCI from January 2016. Percentage variation of monthly values, period to period. https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26,103.1_I2N_2016_M_15,103.1_I2N_2016_M_19 collapse=month format=csv start_date=2016-01 representation_mode=percent_change Core PCI, Core PCI (percentage variation period to period) and Core PCI (percentage variation year to year) from January 2016. Monthly values. Note: series with different scale units, can be hard to visualize in a single graphic. https://apis.datos.gob.ar/series/api/series?ids=103.1_I2N_2016_M_15,103.1_I2N_2016_M_15:percent_change,103.1_I2N_2016_M_15:percent_change_a_year_ago start_date=2016-01 format=csv limit=1000 Apply transformations and changing the temporal aggregation function in individual series, at the same time It is possible to apply both a transformation and a temporal aggregation function to any particular series. In any case, the API will always apply first the temporal aggregation function and then the transformation . Exchange rate. Percentage variation of daily values at the end of each month, period to period. http://apis.datos.gob.ar/series/api/series/?limit=1000 collapse=month ids=168.1_T_CAMBIOR_D_0_0_26:end_of_period:percent_change format=csv","title":"Filter and transform series"},{"location":"additional_parameters/#filter-and-transform-series","text":"Download a table with one or many series Filtering by dates Changing temporal aggregation Changing temporal aggregation function Apply transformations Apply transformations and changing the temporal aggregation function in individual series, at the same time","title":"Filter and transform series"},{"location":"additional_parameters/#download-a-table-with-one-or-many-series","text":"ids parameter allows querying up to 40 series simultaneously , separated by commas. PCI by categories http://apis.datos.gob.ar/series/api/series/?ids=103.1_I2N_2016_M_15,101.1_I2NG_2016_M_22,102.1_I2S_ABRI_M_18,102.1_I2B_ABRI_M_15,103.1_I2R_2016_M_18,103.1_I2E_2016_M_21 format=csv","title":"Download a table with one or many series"},{"location":"additional_parameters/#filtering-by-dates","text":"start_date and end_date parameters allow limiting a query to a particular range in time. Exchange rate since January 2016 https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26 start_date=2016-01 limit=1000 format=csv Exchange rate up to December 2016 https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26 end_date=2016-12 format=csv Exchange rate from January 2016 up to December 2016 https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26 start_date=2016-01 end_date=2016-12 format=csv","title":"Filtering by dates"},{"location":"additional_parameters/#changing-temporal-aggregation","text":"By default, all series are shown in the highest possible frequency (this is, the lowest frequency between all the series in the query). collapse parameter allows to choose a lower frequency than this one. General, Brasil and China Real Exchange Rate Indexes. Monthly values quarterly averaged. http://apis.datos.gob.ar/series/api/series/?limit=1000 collapse=quarter ids=116.3_TCRMA_0_M_36,116.3_TCRC_0_M_22,116.3_TCRB_0_M_23 format=csv","title":"Changing temporal aggregation"},{"location":"additional_parameters/#changing-temporal-aggregation-function","text":"By default, when the API calculates temporal aggregations (ie. converting a monthly series into a quarterly one) it does an average of series values in each period . This function of aggregation can be changed for all the series in the query using collapse_aggregation parameter, or to any individual series without affecting the others (sum, max, min, etc.). Exchange rate. Daily values a the end of the month. https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26 collapse=month collapse_aggregation=end_of_period format=csv Exchange rate. Daily values minimum, maximum, average and end of the month. https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26:min,168.1_T_CAMBIOR_D_0_0_26:avg,168.1_T_CAMBIOR_D_0_0_26:max,168.1_T_CAMBIOR_D_0_0_26:end_of_period collapse=month format=csv limit=1000","title":"Changing temporal aggregation function"},{"location":"additional_parameters/#apply-transformations","text":"Series can be transformed into different units (percentage variation, year-to-year variation, etc.) individually or for all the query, using representation_mode parameter. Exchange rate, Core PCI and General PCI from January 2016. Percentage variation of monthly values, period to period. https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26,103.1_I2N_2016_M_15,103.1_I2N_2016_M_19 collapse=month format=csv start_date=2016-01 representation_mode=percent_change Core PCI, Core PCI (percentage variation period to period) and Core PCI (percentage variation year to year) from January 2016. Monthly values. Note: series with different scale units, can be hard to visualize in a single graphic. https://apis.datos.gob.ar/series/api/series?ids=103.1_I2N_2016_M_15,103.1_I2N_2016_M_15:percent_change,103.1_I2N_2016_M_15:percent_change_a_year_ago start_date=2016-01 format=csv limit=1000","title":"Apply transformations"},{"location":"additional_parameters/#apply-transformations-and-changing-the-temporal-aggregation-function-in-individual-series-at-the-same-time","text":"It is possible to apply both a transformation and a temporal aggregation function to any particular series. In any case, the API will always apply first the temporal aggregation function and then the transformation . Exchange rate. Percentage variation of daily values at the end of each month, period to period. http://apis.datos.gob.ar/series/api/series/?limit=1000 collapse=month ids=168.1_T_CAMBIOR_D_0_0_26:end_of_period:percent_change format=csv","title":"Apply transformations and changing the temporal aggregation function in individual series, at the same time"},{"location":"applications/","text":"Applications List of projects using, extending or documenting the Time Series API. Own datosgobar/series-tiempo-ar-landing : Modular web dashboard, parametrized to easily build an indicators landing with data and graphics, based on the Time Series API. datosgobar/series-tiempo-ar-call-generator : Light and simple form to generate Time Series API calls. Third party fmgarciadiaz/PortalHacienda : R interface to use the API by @fergd1978 . http://series-de-tiempo-ar-graficos.netlify.com/ : Web interface to search and visualize series by @SoyYoConBonete_ . Contact us \u00bfDid you develop a library or project using the API? We invite you to contact us so we can add it to the list. For everything else, you can send your comment or question to datos@modernizacion.gob.ar .","title":"Applications"},{"location":"applications/#applications","text":"List of projects using, extending or documenting the Time Series API.","title":"Applications"},{"location":"applications/#own","text":"datosgobar/series-tiempo-ar-landing : Modular web dashboard, parametrized to easily build an indicators landing with data and graphics, based on the Time Series API. datosgobar/series-tiempo-ar-call-generator : Light and simple form to generate Time Series API calls.","title":"Own"},{"location":"applications/#third-party","text":"fmgarciadiaz/PortalHacienda : R interface to use the API by @fergd1978 . http://series-de-tiempo-ar-graficos.netlify.com/ : Web interface to search and visualize series by @SoyYoConBonete_ .","title":"Third party"},{"location":"applications/#contact-us","text":"\u00bfDid you develop a library or project using the API? We invite you to contact us so we can add it to the list. For everything else, you can send your comment or question to datos@modernizacion.gob.ar .","title":"Contact us"},{"location":"python_usage/","text":"Python use With requests With pandas With requests Build a wrapper function to ease API call generation. import requests import urllib.parse def get_api_call ( ids , ** kwargs ): API_BASE_URL = https://apis.datos.gob.ar/series/api/ kwargs [ ids ] = , . join ( ids ) return {}{}?{} . format ( API_BASE_URL , series , urllib . parse . urlencode ( kwargs )) A valid API call should have at least one valid series id, and then can have optional parameters. api_call = get_api_call ([ 168.1_T_CAMBIOR_D_0_0_26 ], start_date = 2018-08 ) print ( api_call ) https : // apis . datos . gob . ar / series / api / series ? start_date = 2018 - 08 ids = 168.1 _T_CAMBIOR_D_0_0_26 Get result in a python dictionary. result = requests . get ( api_call ) . json () print ( result ) { data : [[ 2018-08-01 , 27.525 ], [ 2018-08-02 , 27.45 ], [ 2018-08-03 , 27.29 ], [ 2018-08-04 , 27.29 ], [ 2018-08-05 , 27.29 ], [ 2018-08-06 , 27.33 ], [ 2018-08-07 , 27.395 ], [ 2018-08-08 , 27.65 ], [ 2018-08-09 , 28.11 ], [ 2018-08-10 , 29.25 ], [ 2018-08-11 , 29.25 ], [ 2018-08-12 , 29.25 ], [ 2018-08-13 , 29.925 ], [ 2018-08-14 , 29.61 ], [ 2018-08-15 , 30.0 ], [ 2018-08-16 , 29.84 ]], meta : [{ end_date : 2018-08-16 , frequency : day , start_date : 2018-08-01 }, { catalog : { title : Datos Programaci\u00f3n Macroecon\u00f3mica }, dataset : { description : Datos de tipo de cambio $-USD - futuro d\u00f3lar . Con respecto al d\u00f3lar de Estados Unidos. Frecuencia diaria. , issued : 2017-09-28 , source : BCRA, MAE, Rofex y Bloomberg , title : Tipo de Cambio $-USD - Futuro D\u00f3lar }, distribution : { downloadURL : http://infra.datos.gob.ar/catalog/sspm/dataset/168/distribution/168.1/download/datos-tipo-cambio-usd-futuro-dolar-frecuencia-diaria.csv , title : Tipo de cambio $-USD - futuro d\u00f3lar. Valores diarios }, field : { description : Tipo de Cambio BNA (Vendedor) , id : 168.1_T_CAMBIOR_D_0_0_26 , units : Pesos argentinos por d\u00f3lar }}], params : { identifiers : [{ dataset : 168 , distribution : 168.1 , id : 168.1_T_CAMBIOR_D_0_0_26 }], ids : 168.1_T_CAMBIOR_D_0_0_26 , start_date : 2018-08 }} With pandas CSV API calls can be read directly into a pandas.DataFrame . import pandas as pd df = pd . read_csv ( get_api_call ( [ 168.1_T_CAMBIOR_D_0_0_26 , 101.1_I2NG_2016_M_22 , 116.3_TCRMA_0_M_36 , 143.3_NO_PR_2004_A_21 , 11.3_VMATC_2004_M_12 ], format = csv , start_date = 2018 )) indice_tiempo tipo_cambio_bna_vendedor ipc_2016_nivel_general \\ 2018-01-01 19.023065 127.0147 2018-02-01 19.835179 130.2913 2018-03-01 20.229355 133.5028 2018-04-01 20.251100 136.9380 2018-05-01 23.600452 139.5800 2018-06-01 26.674333 145.0582 2018-07-01 27.607645 149.1178 tipo_cambio_real_multilateral_actual indice_serie_original construccion 96.628715 144.086686 158.920762 96.121512 138.470530 152.630381 93.062453 155.570021 158.931156 90.715862 152.432629 149.860484 104.302984 160.622476 154.011846 114.546258 NaN NaN 107.105698 NaN NaN","title":"Python use"},{"location":"python_usage/#python-use","text":"With requests With pandas","title":"Python use"},{"location":"python_usage/#with-requests","text":"Build a wrapper function to ease API call generation. import requests import urllib.parse def get_api_call ( ids , ** kwargs ): API_BASE_URL = https://apis.datos.gob.ar/series/api/ kwargs [ ids ] = , . join ( ids ) return {}{}?{} . format ( API_BASE_URL , series , urllib . parse . urlencode ( kwargs )) A valid API call should have at least one valid series id, and then can have optional parameters. api_call = get_api_call ([ 168.1_T_CAMBIOR_D_0_0_26 ], start_date = 2018-08 ) print ( api_call ) https : // apis . datos . gob . ar / series / api / series ? start_date = 2018 - 08 ids = 168.1 _T_CAMBIOR_D_0_0_26 Get result in a python dictionary. result = requests . get ( api_call ) . json () print ( result ) { data : [[ 2018-08-01 , 27.525 ], [ 2018-08-02 , 27.45 ], [ 2018-08-03 , 27.29 ], [ 2018-08-04 , 27.29 ], [ 2018-08-05 , 27.29 ], [ 2018-08-06 , 27.33 ], [ 2018-08-07 , 27.395 ], [ 2018-08-08 , 27.65 ], [ 2018-08-09 , 28.11 ], [ 2018-08-10 , 29.25 ], [ 2018-08-11 , 29.25 ], [ 2018-08-12 , 29.25 ], [ 2018-08-13 , 29.925 ], [ 2018-08-14 , 29.61 ], [ 2018-08-15 , 30.0 ], [ 2018-08-16 , 29.84 ]], meta : [{ end_date : 2018-08-16 , frequency : day , start_date : 2018-08-01 }, { catalog : { title : Datos Programaci\u00f3n Macroecon\u00f3mica }, dataset : { description : Datos de tipo de cambio $-USD - futuro d\u00f3lar . Con respecto al d\u00f3lar de Estados Unidos. Frecuencia diaria. , issued : 2017-09-28 , source : BCRA, MAE, Rofex y Bloomberg , title : Tipo de Cambio $-USD - Futuro D\u00f3lar }, distribution : { downloadURL : http://infra.datos.gob.ar/catalog/sspm/dataset/168/distribution/168.1/download/datos-tipo-cambio-usd-futuro-dolar-frecuencia-diaria.csv , title : Tipo de cambio $-USD - futuro d\u00f3lar. Valores diarios }, field : { description : Tipo de Cambio BNA (Vendedor) , id : 168.1_T_CAMBIOR_D_0_0_26 , units : Pesos argentinos por d\u00f3lar }}], params : { identifiers : [{ dataset : 168 , distribution : 168.1 , id : 168.1_T_CAMBIOR_D_0_0_26 }], ids : 168.1_T_CAMBIOR_D_0_0_26 , start_date : 2018-08 }}","title":"With requests"},{"location":"python_usage/#with-pandas","text":"CSV API calls can be read directly into a pandas.DataFrame . import pandas as pd df = pd . read_csv ( get_api_call ( [ 168.1_T_CAMBIOR_D_0_0_26 , 101.1_I2NG_2016_M_22 , 116.3_TCRMA_0_M_36 , 143.3_NO_PR_2004_A_21 , 11.3_VMATC_2004_M_12 ], format = csv , start_date = 2018 )) indice_tiempo tipo_cambio_bna_vendedor ipc_2016_nivel_general \\ 2018-01-01 19.023065 127.0147 2018-02-01 19.835179 130.2913 2018-03-01 20.229355 133.5028 2018-04-01 20.251100 136.9380 2018-05-01 23.600452 139.5800 2018-06-01 26.674333 145.0582 2018-07-01 27.607645 149.1178 tipo_cambio_real_multilateral_actual indice_serie_original construccion 96.628715 144.086686 158.920762 96.121512 138.470530 152.630381 93.062453 155.570021 158.931156 90.715862 152.432629 149.860484 104.302984 160.622476 154.011846 114.546258 NaN NaN 107.105698 NaN NaN","title":"With pandas"},{"location":"quick_start/","text":"Start using the Time Series API 1. Look for series In a file In the time series explorer 2. Build query Manually In the call generator 3. Make query Use or integrate JSON Download CSV Integrate in a spreadsheet Use in the time series explorer 1. Look for series To use the API, you have to look for series ids of your interest. In a file In datos.gob.ar you can find the complete time series database , containing the list of available series in different formats: CSV XLSX DTA In the time series explorer In the Time Series Explorer you can look for series, visualize them and share URLs to the API or the web explorer. 2. Build query Manually Series ids must be passed to ids parameter. Additional parameter can be used to filter and transform values . See the API reference for a complete documentation of all available parameters. In the call generator Using the call generator you can see all the available parameters to build an API call. 3. Make query Use or integrate JSON For JSON query from the browser or for application integration of the API: Use format=json (default). Choose metadata detail level metadata=none , only , simple o full . https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26,103.1_I2N_2016_M_15 format=json metadata=full Download CSV For downloading a CSV file: Use format=csv . https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26,103.1_I2N_2016_M_15 format=csv Integrate in a spreadsheet CSV and JSON calls can be easily integrated in a spreadsheet . Use in the time series explorer Any API call can be visualized from the web explorer taking out the apis subdomaing from the URL (and changing to HTTP): API call https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26:percent_change_a_year_ago collapse=month Web explorer URL http://datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26:percent_change_a_year_ago collapse=month","title":"Start using the Time Series API"},{"location":"quick_start/#start-using-the-time-series-api","text":"1. Look for series In a file In the time series explorer 2. Build query Manually In the call generator 3. Make query Use or integrate JSON Download CSV Integrate in a spreadsheet Use in the time series explorer","title":"Start using the Time Series API"},{"location":"quick_start/#1-look-for-series","text":"To use the API, you have to look for series ids of your interest.","title":"1. Look for series"},{"location":"quick_start/#in-a-file","text":"In datos.gob.ar you can find the complete time series database , containing the list of available series in different formats: CSV XLSX DTA","title":"In a file"},{"location":"quick_start/#in-the-time-series-explorer","text":"In the Time Series Explorer you can look for series, visualize them and share URLs to the API or the web explorer.","title":"In the time series explorer"},{"location":"quick_start/#2-build-query","text":"","title":"2. Build query"},{"location":"quick_start/#manually","text":"Series ids must be passed to ids parameter. Additional parameter can be used to filter and transform values . See the API reference for a complete documentation of all available parameters.","title":"Manually"},{"location":"quick_start/#in-the-call-generator","text":"Using the call generator you can see all the available parameters to build an API call.","title":"In the call generator"},{"location":"quick_start/#3-make-query","text":"","title":"3. Make query"},{"location":"quick_start/#use-or-integrate-json","text":"For JSON query from the browser or for application integration of the API: Use format=json (default). Choose metadata detail level metadata=none , only , simple o full . https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26,103.1_I2N_2016_M_15 format=json metadata=full","title":"Use or integrate JSON"},{"location":"quick_start/#download-csv","text":"For downloading a CSV file: Use format=csv . https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26,103.1_I2N_2016_M_15 format=csv","title":"Download CSV"},{"location":"quick_start/#integrate-in-a-spreadsheet","text":"CSV and JSON calls can be easily integrated in a spreadsheet .","title":"Integrate in a spreadsheet"},{"location":"quick_start/#use-in-the-time-series-explorer","text":"Any API call can be visualized from the web explorer taking out the apis subdomaing from the URL (and changing to HTTP): API call https://apis.datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26:percent_change_a_year_ago collapse=month Web explorer URL http://datos.gob.ar/series/api/series?ids=168.1_T_CAMBIOR_D_0_0_26:percent_change_a_year_ago collapse=month","title":"Use in the time series explorer"},{"location":"spreadsheet_integration/","text":"Integrate API in a spreadsheet Google Drive 1. Modify regional configuration 2. Import data to the spreadsheet 3. Choose date format 4. Modify API call URL Excel 1. Generate a query from URL 2. Edit original file codification 3. Edit column types 4. Modify regional configuration 5. Save modifications and load the query Google Drive 1. Modify regional configuration API generates CSV files using \u201c.\u201d as a decimal character. You should choose \"United States\" regional configuration so Google Spreadsheet reads properly the file, or any other compatible region. Alternatively, you can ask the API to change the decimal character using decimal parameter. 2. Import data to the spreadsheet IMPORTDATA() function takes the API call URL and gets data to the spreadsheet. 3. Choose date format Time index can be seen as a number first time data is imported. You can select the entire column and choose the format to visualize date values. 4. Modify API call URL Once you have imported a table for the first time, you can modify parameters to change the query. The table will be updated each time. Excel 1. Generate a query from URL \u201cData\" \"New query\" \u201cFrom other sources\" \u201cFrom web\u201d 2. Edit original file codification API generates CSV files using \"Unicode UTF-8\" encoding, which is not default in Excel. Click in \"Origin\" \"File origin\" Choose \"Unicode UTF-8\". 3. Edit column types Excel can read wrong column types if the decimal separator is not \".\". You should use advanced editor to correct column data types. (You can also use decimal parameter to change the decimal separator) \u201cindice_tiempo\u201d column data type should be \u201ctype date\u201d Rest of the columns, (containing series) should be \u201ctype number\u201d 4. Modify regional configuration In the same advanced editor, regional configurations should be changed at the end to be \u201cen-US\u201d and accepts \u201c.\u201d as a decimal separator (unless decimal parameter is used). 5. Save modifications and load the query For last, you can click in \u201cClose and load\" and the query will be configured in an Excel table that can be updated.","title":"Integrate API in a spreadsheet"},{"location":"spreadsheet_integration/#integrate-api-in-a-spreadsheet","text":"Google Drive 1. Modify regional configuration 2. Import data to the spreadsheet 3. Choose date format 4. Modify API call URL Excel 1. Generate a query from URL 2. Edit original file codification 3. Edit column types 4. Modify regional configuration 5. Save modifications and load the query","title":"Integrate API in a spreadsheet"},{"location":"spreadsheet_integration/#google-drive","text":"","title":"Google Drive"},{"location":"spreadsheet_integration/#1-modify-regional-configuration","text":"API generates CSV files using \u201c.\u201d as a decimal character. You should choose \"United States\" regional configuration so Google Spreadsheet reads properly the file, or any other compatible region. Alternatively, you can ask the API to change the decimal character using decimal parameter.","title":"1. Modify regional configuration"},{"location":"spreadsheet_integration/#2-import-data-to-the-spreadsheet","text":"IMPORTDATA() function takes the API call URL and gets data to the spreadsheet.","title":"2. Import data to the spreadsheet"},{"location":"spreadsheet_integration/#3-choose-date-format","text":"Time index can be seen as a number first time data is imported. You can select the entire column and choose the format to visualize date values.","title":"3. Choose date format"},{"location":"spreadsheet_integration/#4-modify-api-call-url","text":"Once you have imported a table for the first time, you can modify parameters to change the query. The table will be updated each time.","title":"4. Modify API call URL"},{"location":"spreadsheet_integration/#excel","text":"","title":"Excel"},{"location":"spreadsheet_integration/#1-generate-a-query-from-url","text":"\u201cData\" \"New query\" \u201cFrom other sources\" \u201cFrom web\u201d","title":"1. Generate a query from URL"},{"location":"spreadsheet_integration/#2-edit-original-file-codification","text":"API generates CSV files using \"Unicode UTF-8\" encoding, which is not default in Excel. Click in \"Origin\" \"File origin\" Choose \"Unicode UTF-8\".","title":"2. Edit original file codification"},{"location":"spreadsheet_integration/#3-edit-column-types","text":"Excel can read wrong column types if the decimal separator is not \".\". You should use advanced editor to correct column data types. (You can also use decimal parameter to change the decimal separator) \u201cindice_tiempo\u201d column data type should be \u201ctype date\u201d Rest of the columns, (containing series) should be \u201ctype number\u201d","title":"3. Edit column types"},{"location":"spreadsheet_integration/#4-modify-regional-configuration","text":"In the same advanced editor, regional configurations should be changed at the end to be \u201cen-US\u201d and accepts \u201c.\u201d as a decimal separator (unless decimal parameter is used).","title":"4. Modify regional configuration"},{"location":"spreadsheet_integration/#5-save-modifications-and-load-the-query","text":"For last, you can click in \u201cClose and load\" and the query will be configured in an Excel table that can be updated.","title":"5. Save modifications and load the query"},{"location":"developers/admin/","text":"Features del panel de administrador Configuraci\u00f3n del rq-scheduler Para asegurar la funcionalidad correcta de la indexaci\u00f3n, es necesario agregar varios Repeatable Job desde el admin de Django. A continuaci\u00f3n se muestra una configuraci\u00f3n ejemplo. Se recomienda setear la queue a indexing . Configurar las siguientes tareas: series_tiempo_ar_api.libs.indexing.tasks.scheduler (cada 5 minutos) series_tiempo_ar_api.apps.management.tasks.schedule_api_indexing (1 vez por d\u00eda, programada para correr despues de schedule_new_read_datajson_task) django_datajsonar.tasks.schedule_new_read_datajson_task (1 vez por d\u00eda) django_datajsonar.tasks.close_read_datajson_task (cada 5 minutos) La vista de tareas programadas deber\u00eda parecerse al siguiente ejemplo. Notar que api indexing est\u00e1 programada a las 3 am, y django_datajsonar indexing est\u00e1 a las 12 am, tres horas antes. Replanificaci\u00f3n de tareas En el caso de querer reconfigurar las tareas, la manera m\u00e1s segura de hacerlo es realizando los siguientes pasos. No se recomienda editar directamente la tarea. En la vista de Repeatable Jobs , ubicar el Job ID de la tarea a reprogramar (ver screenshots anteriores), y ubicarla en la vista de finished jobs de django-rq , en la URL /series/django-rq/ . En este ejemplo, si queremos editar el job de \"datajson ar indexing\", que est\u00e1 bajo la cola default, debemos ver el detalle de la cola haciendo click en el n\u00famero 9 de finished jobs . All\u00ed deber\u00edamos poder ver el job referenciado, 1425c8c4-35d6-4d0c-b716-b3496f64f1d2 . Borrar esta tarea, utilizando el men\u00fa de Actions provisto en la vista de finished jobs , No el Empty Queue . Volver a la vista de Repeatable Jobs , y borrar la tarea que se queire editar. Crear la tarea nuevamente con los nuevos par\u00e1metros deseados. El Job ID de la nueva tarea deber\u00eda ser distinto a la anterior. Indexaci\u00f3n manual de metadatos Creando nuevos modelos IndexMetadataTask se lanzar\u00e1n procesos asincr\u00f3nicos para indexar metadatos de los nodos registrados al cluster de Elasticsearch. Un nuevo proceso de indexaci\u00f3n no puede ser lanzado mientras haya alg\u00fan otro ejecut\u00e1ndose. Se puede seguir el estado de la tarea corriendo a trav\u00e9s de los campos del modelo.","title":"Features del panel de administrador"},{"location":"developers/admin/#features-del-panel-de-administrador","text":"","title":"Features del panel de administrador"},{"location":"developers/admin/#configuracion-del-rq-scheduler","text":"Para asegurar la funcionalidad correcta de la indexaci\u00f3n, es necesario agregar varios Repeatable Job desde el admin de Django. A continuaci\u00f3n se muestra una configuraci\u00f3n ejemplo. Se recomienda setear la queue a indexing . Configurar las siguientes tareas: series_tiempo_ar_api.libs.indexing.tasks.scheduler (cada 5 minutos) series_tiempo_ar_api.apps.management.tasks.schedule_api_indexing (1 vez por d\u00eda, programada para correr despues de schedule_new_read_datajson_task) django_datajsonar.tasks.schedule_new_read_datajson_task (1 vez por d\u00eda) django_datajsonar.tasks.close_read_datajson_task (cada 5 minutos) La vista de tareas programadas deber\u00eda parecerse al siguiente ejemplo. Notar que api indexing est\u00e1 programada a las 3 am, y django_datajsonar indexing est\u00e1 a las 12 am, tres horas antes.","title":"Configuraci\u00f3n del rq-scheduler"},{"location":"developers/admin/#replanificacion-de-tareas","text":"En el caso de querer reconfigurar las tareas, la manera m\u00e1s segura de hacerlo es realizando los siguientes pasos. No se recomienda editar directamente la tarea. En la vista de Repeatable Jobs , ubicar el Job ID de la tarea a reprogramar (ver screenshots anteriores), y ubicarla en la vista de finished jobs de django-rq , en la URL /series/django-rq/ . En este ejemplo, si queremos editar el job de \"datajson ar indexing\", que est\u00e1 bajo la cola default, debemos ver el detalle de la cola haciendo click en el n\u00famero 9 de finished jobs . All\u00ed deber\u00edamos poder ver el job referenciado, 1425c8c4-35d6-4d0c-b716-b3496f64f1d2 . Borrar esta tarea, utilizando el men\u00fa de Actions provisto en la vista de finished jobs , No el Empty Queue . Volver a la vista de Repeatable Jobs , y borrar la tarea que se queire editar. Crear la tarea nuevamente con los nuevos par\u00e1metros deseados. El Job ID de la nueva tarea deber\u00eda ser distinto a la anterior.","title":"Replanificaci\u00f3n de tareas"},{"location":"developers/admin/#indexacion-manual-de-metadatos","text":"Creando nuevos modelos IndexMetadataTask se lanzar\u00e1n procesos asincr\u00f3nicos para indexar metadatos de los nodos registrados al cluster de Elasticsearch. Un nuevo proceso de indexaci\u00f3n no puede ser lanzado mientras haya alg\u00fan otro ejecut\u00e1ndose. Se puede seguir el estado de la tarea corriendo a trav\u00e9s de los campos del modelo.","title":"Indexaci\u00f3n manual de metadatos"},{"location":"developers/arquitectura/","text":"Arquitectura de la API de series de tiempo Introducci\u00f3n La API de Series de Tiempo del Paquete de Apertura de Datos de la Rep\u00fablica Argentina est\u00e1 basada en una aplicaci\u00f3n web Django que corre bajo Python2.7 que funciona como puerta de entrada a los datos que la misma aloja y procesa. Los datos mencionados previamente son calculados en base a recursos alojados en distintas ubicaciones dentro de la World Wide Web , que son obtenidos por procesos asicr\u00f3nicos basados en RQ orquestados utilizando supervisor y Redis.io . El almacenamiento de los datos se realiza en un cluster de Elastic y la API utiliza distintas estrategias para acceder a los mismos, realizando transformaciones precalculadas o en memoria. Componentes de la arquitectura Servidor Web El servidor web contiene la aplicaci\u00f3n Django que conforma el punto de entrada a la API de Series de Tiempo. La aplicaci\u00f3n Django es ejecutada utilizando supervisor y publicada a la web usando el servidor web Nginx . \u00c9sta publica un conjunto de endpoints sencillos que permiten acceder a los datos y a los metadatos de la informaci\u00f3n que contiene, permitiendo configurar filtros y expresiones de transformaci\u00f3n predefinidas (ver documentaci\u00f3n de la API de Series de Tiempo ). Se trata de una aplicaci\u00f3n Django 1.11 (por dependencias transitivas, la API no es compatible con Python3) cuyo panel de administraci\u00f3n se utiliza exhaustivamente para configurar el funcionamiento de la misma. Cluster de Workers Los workers est\u00e1n conformados por aplicaciones Python que ejecutan el mismo contexto y baseline de c\u00f3digo que la aplicaci\u00f3n web. Estos procesos Python realizan distintas tareas asincr\u00f3nicas de administraci\u00f3n que permiten el correcto funcionamiento de la API de Serie de Tiempo, como por ejemplo: Procesamiento de archivos de configuraci\u00f3n. Descarga y validaci\u00f3n de los data.json de la red de nodos. Descarga y validaci\u00f3n de los recursos pertenecientes a los datasets seleccionados para indexar. Indexaci\u00f3n de datos, incluyendo el prec\u00e1lculo de algunos indicadores. Indexaci\u00f3n de metadatos de los datos. Generaci\u00f3n de reportes. Sincronizaci\u00f3n de datos con servicios externos. Las colas de tareas y los workers est\u00e1n basados en Python-RQ, y las tareas se persisten en un servidor de base de datos en memoria Redis.io. Servidor de bases de datos El servidor de bases de datos contiene dos servicios: PostgreSQL: Base de datos relacional que contiene el modelo de datos de la aplicaci\u00f3n web. Redis: Base de datos en memoria que es utilizado para guardar los datos y metadatos de las tareas asincr\u00f3nicas a ejecutar por los workers y tambi\u00e9n es utilizado como cach\u00e9 por la aplicaci\u00f3n web. Cluster Elastic El cluster Elastic contiene un n\u00famero de servidores con el servicio de Elastic search ejecut\u00e1ndose. El mismo est\u00e1 configurado para tener 3 shards y una r\u00e9plica.","title":"Arquitectura de la API de series de tiempo"},{"location":"developers/arquitectura/#arquitectura-de-la-api-de-series-de-tiempo","text":"","title":"Arquitectura de la API de series de tiempo"},{"location":"developers/arquitectura/#introduccion","text":"La API de Series de Tiempo del Paquete de Apertura de Datos de la Rep\u00fablica Argentina est\u00e1 basada en una aplicaci\u00f3n web Django que corre bajo Python2.7 que funciona como puerta de entrada a los datos que la misma aloja y procesa. Los datos mencionados previamente son calculados en base a recursos alojados en distintas ubicaciones dentro de la World Wide Web , que son obtenidos por procesos asicr\u00f3nicos basados en RQ orquestados utilizando supervisor y Redis.io . El almacenamiento de los datos se realiza en un cluster de Elastic y la API utiliza distintas estrategias para acceder a los mismos, realizando transformaciones precalculadas o en memoria.","title":"Introducci\u00f3n"},{"location":"developers/arquitectura/#componentes-de-la-arquitectura","text":"","title":"Componentes de la arquitectura"},{"location":"developers/arquitectura/#servidor-web","text":"El servidor web contiene la aplicaci\u00f3n Django que conforma el punto de entrada a la API de Series de Tiempo. La aplicaci\u00f3n Django es ejecutada utilizando supervisor y publicada a la web usando el servidor web Nginx . \u00c9sta publica un conjunto de endpoints sencillos que permiten acceder a los datos y a los metadatos de la informaci\u00f3n que contiene, permitiendo configurar filtros y expresiones de transformaci\u00f3n predefinidas (ver documentaci\u00f3n de la API de Series de Tiempo ). Se trata de una aplicaci\u00f3n Django 1.11 (por dependencias transitivas, la API no es compatible con Python3) cuyo panel de administraci\u00f3n se utiliza exhaustivamente para configurar el funcionamiento de la misma.","title":"Servidor Web"},{"location":"developers/arquitectura/#cluster-de-workers","text":"Los workers est\u00e1n conformados por aplicaciones Python que ejecutan el mismo contexto y baseline de c\u00f3digo que la aplicaci\u00f3n web. Estos procesos Python realizan distintas tareas asincr\u00f3nicas de administraci\u00f3n que permiten el correcto funcionamiento de la API de Serie de Tiempo, como por ejemplo: Procesamiento de archivos de configuraci\u00f3n. Descarga y validaci\u00f3n de los data.json de la red de nodos. Descarga y validaci\u00f3n de los recursos pertenecientes a los datasets seleccionados para indexar. Indexaci\u00f3n de datos, incluyendo el prec\u00e1lculo de algunos indicadores. Indexaci\u00f3n de metadatos de los datos. Generaci\u00f3n de reportes. Sincronizaci\u00f3n de datos con servicios externos. Las colas de tareas y los workers est\u00e1n basados en Python-RQ, y las tareas se persisten en un servidor de base de datos en memoria Redis.io.","title":"Cluster de Workers"},{"location":"developers/arquitectura/#servidor-de-bases-de-datos","text":"El servidor de bases de datos contiene dos servicios: PostgreSQL: Base de datos relacional que contiene el modelo de datos de la aplicaci\u00f3n web. Redis: Base de datos en memoria que es utilizado para guardar los datos y metadatos de las tareas asincr\u00f3nicas a ejecutar por los workers y tambi\u00e9n es utilizado como cach\u00e9 por la aplicaci\u00f3n web.","title":"Servidor de bases de datos"},{"location":"developers/arquitectura/#cluster-elastic","text":"El cluster Elastic contiene un n\u00famero de servidores con el servicio de Elastic search ejecut\u00e1ndose. El mismo est\u00e1 configurado para tener 3 shards y una r\u00e9plica.","title":"Cluster Elastic"},{"location":"developers/development/","text":"Development A continuaci\u00f3n se detallan los pasos a seguir para levantar una versi\u00f3n local de la aplicaci\u00f3n, apuntado a futuros desarrolladores de la misma. Este documento asume un entorno Linux para el desarrollo, y fue probado bajo Ubuntu 16.04. Requerimientos Python 2.7.6 Virtualenv Docker Docker compose Setup Virtualenv (con Pyenv) Es recomendable instalar las dependencias de la aplicaci\u00f3n en un entorno virtual para evitar conflictos con otras aplicaciones de versionado de las librer\u00edas usadas. Este ejemplo instala un entorno virtual de Python 2.7.6 con el nombre stiempo-api , y todas las dependencias de la aplicaci\u00f3n. pyenv virtualenv 2 .7.6 stiempo-api pyenv activate stiempo-api pip install -r requirements/local.txt Configuraci\u00f3n Algunas configuraciones locales (como variables de entorno, o la base de datos usada) pueden llegar a diferir de la versi\u00f3n productiva, y deben ser seteadas manualmente. Para ello se provee una configuraci\u00f3n de ejemplo , que puede ser usada como base. cp conf/settings/local_example.py conf/settings/local.py cp conf/settings/.env.default_local conf/settings/.env A su vez, se debe informar a Django cual es el m\u00f3dulo de configuraci\u00f3n a leer. Este m\u00f3dulo debe ser el mismo que fue copiado en el paso anterior ( conf/settings/local.py en el ejemplo). Esto se hace seteando la variable de entorno DJANGO_SETTINGS_MODULE , lo cual se puede hacer persistente entre sesiones de terminal escribi\u00e9ndolo en .bashrc (o similar, dependiendo de la terminal utilizada): export DJANGO_SETTINGS_MODULE = conf.settings.local Servicios Los servicios (PostgreSQL, Elasticsearch, Redis) pueden ser levantados usando Docker y Docker Compose: docker-compose pull docker-compose up -d Base de datos Correr las migraciones de las base de datos: python manage.py migrate Worker Levanta los workers para ejecutar tareas asincr\u00f3nicas. Notar que esta tarea bloquea la terminal. python manage.py rqworker high default low scrapping Web server Este comando levanta la aplicaci\u00f3n. python manage.py runserver Si est\u00e1 todo en orden se podr\u00e1 leer alg\u00fan mensaje como el siguiente: Django version 1 .11.6, using settings conf.settings.local Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. Tests Correr scripts/tests.sh desde el directorio ra\u00edz. Tambi\u00e9n se proveen scripts que chequean estilos ( scripts/pycodestyle.sh ) y p\u00fdlint ( scripts/pylint.sh )","title":"Development"},{"location":"developers/development/#development","text":"A continuaci\u00f3n se detallan los pasos a seguir para levantar una versi\u00f3n local de la aplicaci\u00f3n, apuntado a futuros desarrolladores de la misma. Este documento asume un entorno Linux para el desarrollo, y fue probado bajo Ubuntu 16.04.","title":"Development"},{"location":"developers/development/#requerimientos","text":"Python 2.7.6 Virtualenv Docker Docker compose","title":"Requerimientos"},{"location":"developers/development/#setup","text":"","title":"Setup"},{"location":"developers/development/#virtualenv-con-pyenv","text":"Es recomendable instalar las dependencias de la aplicaci\u00f3n en un entorno virtual para evitar conflictos con otras aplicaciones de versionado de las librer\u00edas usadas. Este ejemplo instala un entorno virtual de Python 2.7.6 con el nombre stiempo-api , y todas las dependencias de la aplicaci\u00f3n. pyenv virtualenv 2 .7.6 stiempo-api pyenv activate stiempo-api pip install -r requirements/local.txt","title":"Virtualenv (con Pyenv)"},{"location":"developers/development/#configuracion","text":"Algunas configuraciones locales (como variables de entorno, o la base de datos usada) pueden llegar a diferir de la versi\u00f3n productiva, y deben ser seteadas manualmente. Para ello se provee una configuraci\u00f3n de ejemplo , que puede ser usada como base. cp conf/settings/local_example.py conf/settings/local.py cp conf/settings/.env.default_local conf/settings/.env A su vez, se debe informar a Django cual es el m\u00f3dulo de configuraci\u00f3n a leer. Este m\u00f3dulo debe ser el mismo que fue copiado en el paso anterior ( conf/settings/local.py en el ejemplo). Esto se hace seteando la variable de entorno DJANGO_SETTINGS_MODULE , lo cual se puede hacer persistente entre sesiones de terminal escribi\u00e9ndolo en .bashrc (o similar, dependiendo de la terminal utilizada): export DJANGO_SETTINGS_MODULE = conf.settings.local","title":"Configuraci\u00f3n"},{"location":"developers/development/#servicios","text":"Los servicios (PostgreSQL, Elasticsearch, Redis) pueden ser levantados usando Docker y Docker Compose: docker-compose pull docker-compose up -d","title":"Servicios"},{"location":"developers/development/#base-de-datos","text":"Correr las migraciones de las base de datos: python manage.py migrate","title":"Base de datos"},{"location":"developers/development/#worker","text":"Levanta los workers para ejecutar tareas asincr\u00f3nicas. Notar que esta tarea bloquea la terminal. python manage.py rqworker high default low scrapping","title":"Worker"},{"location":"developers/development/#web-server","text":"Este comando levanta la aplicaci\u00f3n. python manage.py runserver Si est\u00e1 todo en orden se podr\u00e1 leer alg\u00fan mensaje como el siguiente: Django version 1 .11.6, using settings conf.settings.local Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C.","title":"Web server"},{"location":"developers/development/#tests","text":"Correr scripts/tests.sh desde el directorio ra\u00edz. Tambi\u00e9n se proveen scripts que chequean estilos ( scripts/pycodestyle.sh ) y p\u00fdlint ( scripts/pylint.sh )","title":"Tests"},{"location":"reference/api_reference/","text":"API reference: series Endpoint: /series The /series endpoint allows obtaining data and metadata of one or more series, filtering by the time index, changing temporal aggregation and changing units, between other operations. Parameters ids representation_mode collapse collapse_aggregation limit start start_date end_date format header sort metadata decimal sep flatten Parameters Name Required Type Default Examples ids Yes List of alphanumeric characters separated by commas. Contains series specification to query, together with operations and transformations. N/A ids=2.4_DGI_1993_T_19,134.2_B_0_0_6 representation_mode No One of: value, change, percent_change, percent_change_a_year_ago value representation_mode=percent_change collapse No One of: day, week, month, quarter, year The original frequency of the series collapse=year collapse=quarter collapse_aggregation No One of: avg, sum, end_of_period, min, max avg collapse_aggregation=sum limit No Positive integer, less than 1000. 100 limit=50 start No Positive integer or 0. 0 start=100 start_date No Date and time in ISO 8601 format. If this parameter is not specified, data starts from the oldest value. N/A start_date=2016-11-30 start_date=2016-11 start_date=2016 end_date No Date and time in ISO 8601 format. If this parameter is not specified, data will end at the most recent value. N/A end_date=2016-11-30 end_date=2016-11 end_date=2016 format No One of: json, csv json format=csv header No One of: titles, ids, descriptions titles header=ids sort No One of: asc, desc asc sort=desc metadata No One of: none, simple, full, only simple metadata=none decimal No Decimal character to be used. One of: \",\" o \".\" . decimal=, sep No CSV values separator character. Any UTF-8 character . sep=| flatten No Makes the answer flat in a single object with just one hierarchy level (no nested objects). No value should be specified. flatten ids Comma separated list of series ids. Data results will have a column for each series id, in the same order. This parameter is mandatory for making a call . In case is omitted, result will be an error. Each identifier of a series can have a suffix for: Changing representation mode ( representation_mode ). Changing temporal aggregation ( collapse_aggregation ). When these attributes are used inside ids parameter, they must be separated using \":\" character. The order of the components does not affect the order of the operation. Examples: ids=2.4_DGI_1993_T_19,134.2_B_0_0_6:change ids=2.4_DGI_1993_T_19,134.2_B_0_0_6:sum:change ids=2.4_DGI_1993_T_19,134.2_B_0_0_6:change:sum ids=2.4_DGI_1993_T_19:percent_change,134.2_B_0_0_6:sum:change ids=2.4_DGI_1993_T_19:end_of_period:percent_change,134.2_B_0_0_6:sum:change representation_mode Indicates the representation mode of the series. It is applied to all in the ids parameter not having a different representation mode applied. Representation mode by default is the original value of the series ( value ). Available representation modes are: value : Default representation mode. Returns the original value of the serie. change : Returns the absolute difference between value of t period and t-1 period. percent_change : Returns percentage variation of the value in the t period and t-1 period. percent_change_a_year_ago : Returns percentage variation between t period value and the same t period, a year ago. Available transformation functions in representation_mode can also be specified for individual series using :percent_change notation, together with series id: Construction Economic Activity. Percentage variation of monthly values, period to period. https://apis.datos.gob.ar/series/api/series/?limit=1000 ids=11.3_VMATC_2004_M_12:percent_change Construction Economic Activity (percentage variation period to period), Construction Economic Activity (percentage variation year to year). Monthly values. https://apis.datos.gob.ar/series/api/series/?limit=1000 ids=11.3_VMATC_2004_M_12:percent_change,11.3_VMATC_2004_M_12:percent_change_a_year_ago representation_mode parameter will continue to affect all series where no individual representation mode has been specified. collapse collapse parameter modifies sample frequency of series of the query. It must be used in combination with collapse_aggregation to specify a temporal aggregation function, when necessary. Available options are: year : Show data yearly aggregated. quarter : Show data quarterly aggregated. month : Show data monthly aggregated. week : Show data weekly aggregated. day : Show data daily aggregated. If not specified, data of a single series query is return using original frequency of the serie . If multiples series of different frequencies are being called at the same time , the lowest frequency of all of them will be used (ie.: if you ask for daily, monthly and quarterly series in the same call, they will all be converted to quarterly frequency). If you ask for a higher frequency level in collapse than the lowest one available between asked series, the query will return an error. collapse parameter affects globally to all series selected from the ids parameter in the API call. collapse_aggregation collapse_aggregation parameter indicates the temporal aggregation function that must be used to make all the series in the call have the same frequency (ie.: what operation should be used to convert a monthly series in a yearly series). This aggregation function will act over data of: Series with higher original aggregation level (highest frequency) than the one specified in collapse parameter. In case collapse parameter is not specified, series of higher aggregation level than the one of the series with the lowest temporal aggregation level of all. Available options are: avg : Calculates the average of all values. This is the default option if no collapse_aggregation parameter is specified. sum : Sum all values. end_of_period : Last value of the aggregated period. min : Minimum value of the aggregated period. max : Maximum value of the aggregated period. Temporal aggregation functions available in collapse_aggregation parameter can also be specified for individual series using :sum notation together with series id: Payment of tourism services and trips. Monthly values averaged and sum by year. https://apis.datos.gob.ar/series/api/series/?ids=185.1_COBRO_SERVJES_0_M_30:avg,185.1_COBRO_SERVJES_0_M_30:sum collapse=year collapse_aggregation parameter will continue to affect all series that have no temporal aggregation function individually specified. Payment of tourism services and trips. Monthly values averaged and sum by year. https://apis.datos.gob.ar/series/api/series/?ids=185.1_COBRO_SERVJES_0_M_30:avg,185.1_COBRO_SERVJES_0_M_30 collapse=year collapse_aggregation=sum limit Parameter used together with start to control pagination of API call results. Must be a positive integer not greater than 1000. Default value is 100. start Parameter used together with limit to control pagination of API call results. Must be a positive integer or 0. Default value is 0. start parameter indicates the \"number of periods after start_date \" (or the \"number of periods before end_date \", depending on asc or desc sorting criteria specified on sort parameter) that should be skipped from beginning or end of the series before staring to return values. start_date start_date parameter indicates the less recent date where API results should start, when data is available. Values where time index is equal to start_date value will be included. It is a temporal filter over time index of all series in the API call. end_date end_date parameter indicates the most recent date where API results should end, when data is available. Values where time index is equal to end_date will be included. It is a temporal filter over time index of all series in the API call. format Specifies the format of the results. JSON is the default. Available options are: json : Returns a JSON object with data and metadata of the series. csv : Returns selected series in a comma separated format. It does not include metadata. header Specifies attributes of series to be used as headers of the CSV file columns. Uses titles as default, being the shortest human readable titles of the series. Available options are: titles : Series titles as oferta_global_pib (default). ids : Series unique identifiers. The same values passed in ids parameter. descriptions : Complete descriptions of the series as Plazo fijo entre 60-89 d\u00edas en millones de pesos. Categor\u00eda II-VI . sort Specifies the sorting direction in which values are returned. asc is the default value. Available options are: asc : Less recent values first (default). desc : Most recent values first. metadata Specifies the level of metadata detail required by the user, being simple the default. Only applies when format=json . Available options are: none : No metadata is returned, only data. only : No data is returned, only metadata. simple : Only important metadata to understand and use the series is returned (default). full : All metadata available is returned. decimal Specifies character used for decimal numbers. . is the default. Only applies when format=csv . Available options are: , : Comma. . : Dot. sep Specifies the character that separates values in a CSV file. , is the default. Only applies when format=csv . Any UTF-8 character can be used, but it is highly recommended to keep the default (comma) in most cases. flatten Specifies if the metadata results should be returned with a flat hierarchy. When parameter is not included, API call result has a nested structure: { catalog : [ catalog_meta ], dataset : [ dataset_meta ], distribution : [ distribution_meta ], field : [ field_meta ], } When flatten is included, API call metadata result has a flat structure: { catalog_meta1: ..., catalog_meta2: ..., dataset_meta1: ..., level _ meta_key : meta_value ... }","title":"/series"},{"location":"reference/api_reference/#api-reference-series","text":"Endpoint: /series The /series endpoint allows obtaining data and metadata of one or more series, filtering by the time index, changing temporal aggregation and changing units, between other operations. Parameters ids representation_mode collapse collapse_aggregation limit start start_date end_date format header sort metadata decimal sep flatten","title":"API reference: series"},{"location":"reference/api_reference/#parameters","text":"Name Required Type Default Examples ids Yes List of alphanumeric characters separated by commas. Contains series specification to query, together with operations and transformations. N/A ids=2.4_DGI_1993_T_19,134.2_B_0_0_6 representation_mode No One of: value, change, percent_change, percent_change_a_year_ago value representation_mode=percent_change collapse No One of: day, week, month, quarter, year The original frequency of the series collapse=year collapse=quarter collapse_aggregation No One of: avg, sum, end_of_period, min, max avg collapse_aggregation=sum limit No Positive integer, less than 1000. 100 limit=50 start No Positive integer or 0. 0 start=100 start_date No Date and time in ISO 8601 format. If this parameter is not specified, data starts from the oldest value. N/A start_date=2016-11-30 start_date=2016-11 start_date=2016 end_date No Date and time in ISO 8601 format. If this parameter is not specified, data will end at the most recent value. N/A end_date=2016-11-30 end_date=2016-11 end_date=2016 format No One of: json, csv json format=csv header No One of: titles, ids, descriptions titles header=ids sort No One of: asc, desc asc sort=desc metadata No One of: none, simple, full, only simple metadata=none decimal No Decimal character to be used. One of: \",\" o \".\" . decimal=, sep No CSV values separator character. Any UTF-8 character . sep=| flatten No Makes the answer flat in a single object with just one hierarchy level (no nested objects). No value should be specified. flatten","title":"Parameters"},{"location":"reference/api_reference/#ids","text":"Comma separated list of series ids. Data results will have a column for each series id, in the same order. This parameter is mandatory for making a call . In case is omitted, result will be an error. Each identifier of a series can have a suffix for: Changing representation mode ( representation_mode ). Changing temporal aggregation ( collapse_aggregation ). When these attributes are used inside ids parameter, they must be separated using \":\" character. The order of the components does not affect the order of the operation. Examples: ids=2.4_DGI_1993_T_19,134.2_B_0_0_6:change ids=2.4_DGI_1993_T_19,134.2_B_0_0_6:sum:change ids=2.4_DGI_1993_T_19,134.2_B_0_0_6:change:sum ids=2.4_DGI_1993_T_19:percent_change,134.2_B_0_0_6:sum:change ids=2.4_DGI_1993_T_19:end_of_period:percent_change,134.2_B_0_0_6:sum:change","title":"ids"},{"location":"reference/api_reference/#representation_mode","text":"Indicates the representation mode of the series. It is applied to all in the ids parameter not having a different representation mode applied. Representation mode by default is the original value of the series ( value ). Available representation modes are: value : Default representation mode. Returns the original value of the serie. change : Returns the absolute difference between value of t period and t-1 period. percent_change : Returns percentage variation of the value in the t period and t-1 period. percent_change_a_year_ago : Returns percentage variation between t period value and the same t period, a year ago. Available transformation functions in representation_mode can also be specified for individual series using :percent_change notation, together with series id: Construction Economic Activity. Percentage variation of monthly values, period to period. https://apis.datos.gob.ar/series/api/series/?limit=1000 ids=11.3_VMATC_2004_M_12:percent_change Construction Economic Activity (percentage variation period to period), Construction Economic Activity (percentage variation year to year). Monthly values. https://apis.datos.gob.ar/series/api/series/?limit=1000 ids=11.3_VMATC_2004_M_12:percent_change,11.3_VMATC_2004_M_12:percent_change_a_year_ago representation_mode parameter will continue to affect all series where no individual representation mode has been specified.","title":"representation_mode"},{"location":"reference/api_reference/#collapse","text":"collapse parameter modifies sample frequency of series of the query. It must be used in combination with collapse_aggregation to specify a temporal aggregation function, when necessary. Available options are: year : Show data yearly aggregated. quarter : Show data quarterly aggregated. month : Show data monthly aggregated. week : Show data weekly aggregated. day : Show data daily aggregated. If not specified, data of a single series query is return using original frequency of the serie . If multiples series of different frequencies are being called at the same time , the lowest frequency of all of them will be used (ie.: if you ask for daily, monthly and quarterly series in the same call, they will all be converted to quarterly frequency). If you ask for a higher frequency level in collapse than the lowest one available between asked series, the query will return an error. collapse parameter affects globally to all series selected from the ids parameter in the API call.","title":"collapse"},{"location":"reference/api_reference/#collapse_aggregation","text":"collapse_aggregation parameter indicates the temporal aggregation function that must be used to make all the series in the call have the same frequency (ie.: what operation should be used to convert a monthly series in a yearly series). This aggregation function will act over data of: Series with higher original aggregation level (highest frequency) than the one specified in collapse parameter. In case collapse parameter is not specified, series of higher aggregation level than the one of the series with the lowest temporal aggregation level of all. Available options are: avg : Calculates the average of all values. This is the default option if no collapse_aggregation parameter is specified. sum : Sum all values. end_of_period : Last value of the aggregated period. min : Minimum value of the aggregated period. max : Maximum value of the aggregated period. Temporal aggregation functions available in collapse_aggregation parameter can also be specified for individual series using :sum notation together with series id: Payment of tourism services and trips. Monthly values averaged and sum by year. https://apis.datos.gob.ar/series/api/series/?ids=185.1_COBRO_SERVJES_0_M_30:avg,185.1_COBRO_SERVJES_0_M_30:sum collapse=year collapse_aggregation parameter will continue to affect all series that have no temporal aggregation function individually specified. Payment of tourism services and trips. Monthly values averaged and sum by year. https://apis.datos.gob.ar/series/api/series/?ids=185.1_COBRO_SERVJES_0_M_30:avg,185.1_COBRO_SERVJES_0_M_30 collapse=year collapse_aggregation=sum","title":"collapse_aggregation"},{"location":"reference/api_reference/#limit","text":"Parameter used together with start to control pagination of API call results. Must be a positive integer not greater than 1000. Default value is 100.","title":"limit"},{"location":"reference/api_reference/#start","text":"Parameter used together with limit to control pagination of API call results. Must be a positive integer or 0. Default value is 0. start parameter indicates the \"number of periods after start_date \" (or the \"number of periods before end_date \", depending on asc or desc sorting criteria specified on sort parameter) that should be skipped from beginning or end of the series before staring to return values.","title":"start"},{"location":"reference/api_reference/#start_date","text":"start_date parameter indicates the less recent date where API results should start, when data is available. Values where time index is equal to start_date value will be included. It is a temporal filter over time index of all series in the API call.","title":"start_date"},{"location":"reference/api_reference/#end_date","text":"end_date parameter indicates the most recent date where API results should end, when data is available. Values where time index is equal to end_date will be included. It is a temporal filter over time index of all series in the API call.","title":"end_date"},{"location":"reference/api_reference/#format","text":"Specifies the format of the results. JSON is the default. Available options are: json : Returns a JSON object with data and metadata of the series. csv : Returns selected series in a comma separated format. It does not include metadata.","title":"format"},{"location":"reference/api_reference/#header","text":"Specifies attributes of series to be used as headers of the CSV file columns. Uses titles as default, being the shortest human readable titles of the series. Available options are: titles : Series titles as oferta_global_pib (default). ids : Series unique identifiers. The same values passed in ids parameter. descriptions : Complete descriptions of the series as Plazo fijo entre 60-89 d\u00edas en millones de pesos. Categor\u00eda II-VI .","title":"header"},{"location":"reference/api_reference/#sort","text":"Specifies the sorting direction in which values are returned. asc is the default value. Available options are: asc : Less recent values first (default). desc : Most recent values first.","title":"sort"},{"location":"reference/api_reference/#metadata","text":"Specifies the level of metadata detail required by the user, being simple the default. Only applies when format=json . Available options are: none : No metadata is returned, only data. only : No data is returned, only metadata. simple : Only important metadata to understand and use the series is returned (default). full : All metadata available is returned.","title":"metadata"},{"location":"reference/api_reference/#decimal","text":"Specifies character used for decimal numbers. . is the default. Only applies when format=csv . Available options are: , : Comma. . : Dot.","title":"decimal"},{"location":"reference/api_reference/#sep","text":"Specifies the character that separates values in a CSV file. , is the default. Only applies when format=csv . Any UTF-8 character can be used, but it is highly recommended to keep the default (comma) in most cases.","title":"sep"},{"location":"reference/api_reference/#flatten","text":"Specifies if the metadata results should be returned with a flat hierarchy. When parameter is not included, API call result has a nested structure: { catalog : [ catalog_meta ], dataset : [ dataset_meta ], distribution : [ distribution_meta ], field : [ field_meta ], } When flatten is included, API call metadata result has a flat structure: { catalog_meta1: ..., catalog_meta2: ..., dataset_meta1: ..., level _ meta_key : meta_value ... }","title":"flatten"},{"location":"reference/search_reference/","text":"API reference: search Parameters q dataset_theme , units , dataset_publisher_name , dataset_source , catalog_id limit start Endpoint: /search /search endpoint allows to look for series using a string, being able to filter results with other attributes (ie.: by theme or units). Parameters Name Required Type Default Examples q Yes String N/A q=ipc dataset_theme No One of the listed values in /search/dataset_theme N/A dataset_theme=\"Finanzas P\u00fablicas\" units No One of the listed values in /search/field_units N/A units=\"Millones de pesos\" dataset_publisher_name No One of the listed values in /search/dataset_publisher_name N/A dataset_publisher_name=\"Subsecretar\u00eda de Programaci\u00f3n Macroecon\u00f3mica.\" dataset_source No One of the listed values in /search/dataset_source N/A dataset_source=\"Ministerio de Hacienda\" catalog_id No One of the listed values in /search/catalog_id N/A catalog_id=\"sspm\" limit No Positive integer, not greater than 1000. 10 limit=50 start No Positive integer or 0. 0 start=100 q String to input for looking in the database. It can be of any long, but is recommended to input one or more key words. dataset_theme , units , dataset_publisher_name , dataset_source , catalog_id These parameters can be used as filters in the search results . When applied, only matching results are shown. Example: units=Millones de pesos will only contain results where units series are in \"millones de pesos\". Valid filtering values for the parameters are specified in auxiliary endpoints of search main one that return a complete list of accepted values in the filters. Example: /search/field_units returns a list of valid values to be used with units parameter. Any other option will return an empty list (because there will be no matches). Parameters table have all auxiliary endpoints available. limit Parameter used together with start to control pagination of API call results. Must be a positive integer not greater than 1000. Default value is 100. start Parameter used together with limit to control pagination of API call results. Must be a positive integer or 0. Default value is 0. start parameter indicates the \"number of periods after start_date \" (or the \"number of periods before end_date \", depending on asc or desc sorting criteria specified on sort parameter) that should be skipped from beginning or end of the series before staring to return values.","title":"/search"},{"location":"reference/search_reference/#api-reference-search","text":"Parameters q dataset_theme , units , dataset_publisher_name , dataset_source , catalog_id limit start Endpoint: /search /search endpoint allows to look for series using a string, being able to filter results with other attributes (ie.: by theme or units).","title":"API reference: search"},{"location":"reference/search_reference/#parameters","text":"Name Required Type Default Examples q Yes String N/A q=ipc dataset_theme No One of the listed values in /search/dataset_theme N/A dataset_theme=\"Finanzas P\u00fablicas\" units No One of the listed values in /search/field_units N/A units=\"Millones de pesos\" dataset_publisher_name No One of the listed values in /search/dataset_publisher_name N/A dataset_publisher_name=\"Subsecretar\u00eda de Programaci\u00f3n Macroecon\u00f3mica.\" dataset_source No One of the listed values in /search/dataset_source N/A dataset_source=\"Ministerio de Hacienda\" catalog_id No One of the listed values in /search/catalog_id N/A catalog_id=\"sspm\" limit No Positive integer, not greater than 1000. 10 limit=50 start No Positive integer or 0. 0 start=100","title":"Parameters"},{"location":"reference/search_reference/#q","text":"String to input for looking in the database. It can be of any long, but is recommended to input one or more key words.","title":"q"},{"location":"reference/search_reference/#dataset_theme-units-dataset_publisher_name-dataset_source-catalog_id","text":"These parameters can be used as filters in the search results . When applied, only matching results are shown. Example: units=Millones de pesos will only contain results where units series are in \"millones de pesos\". Valid filtering values for the parameters are specified in auxiliary endpoints of search main one that return a complete list of accepted values in the filters. Example: /search/field_units returns a list of valid values to be used with units parameter. Any other option will return an empty list (because there will be no matches). Parameters table have all auxiliary endpoints available.","title":"dataset_theme, units, dataset_publisher_name, dataset_source, catalog_id"},{"location":"reference/search_reference/#limit","text":"Parameter used together with start to control pagination of API call results. Must be a positive integer not greater than 1000. Default value is 100.","title":"limit"},{"location":"reference/search_reference/#start","text":"Parameter used together with limit to control pagination of API call results. Must be a positive integer or 0. Default value is 0. start parameter indicates the \"number of periods after start_date \" (or the \"number of periods before end_date \", depending on asc or desc sorting criteria specified on sort parameter) that should be skipped from beginning or end of the series before staring to return values.","title":"start"}]}